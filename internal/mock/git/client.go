// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=../../mock/git/client.go -package=git
//

// Package git is a generated GoMock package.
package git

import (
	reflect "reflect"

	git "github.com/cffnpwr/git-cz-go/internal/interface/git"
	gomock "go.uber.org/mock/gomock"
)

// MockGitClient is a mock of GitClient interface.
type MockGitClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitClientMockRecorder
	isgomock struct{}
}

// MockGitClientMockRecorder is the mock recorder for MockGitClient.
type MockGitClientMockRecorder struct {
	mock *MockGitClient
}

// NewMockGitClient creates a new mock instance.
func NewMockGitClient(ctrl *gomock.Controller) *MockGitClient {
	mock := &MockGitClient{ctrl: ctrl}
	mock.recorder = &MockGitClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitClient) EXPECT() *MockGitClientMockRecorder {
	return m.recorder
}

// PlainOpen mocks base method.
func (m *MockGitClient) PlainOpen(path string) (git.GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlainOpen", path)
	ret0, _ := ret[0].(git.GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlainOpen indicates an expected call of PlainOpen.
func (mr *MockGitClientMockRecorder) PlainOpen(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlainOpen", reflect.TypeOf((*MockGitClient)(nil).PlainOpen), path)
}
