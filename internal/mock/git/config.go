// Code generated by MockGen. DO NOT EDIT.
// Source: config.go
//
// Generated by this command:
//
//	mockgen -source=config.go -destination=../../mock/git/config.go -package=git
//

// Package git is a generated GoMock package.
package git

import (
	reflect "reflect"

	object "github.com/go-git/go-git/v5/plumbing/object"
	gomock "go.uber.org/mock/gomock"
)

// MockGitConfigReader is a mock of GitConfigReader interface.
type MockGitConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockGitConfigReaderMockRecorder
	isgomock struct{}
}

// MockGitConfigReaderMockRecorder is the mock recorder for MockGitConfigReader.
type MockGitConfigReaderMockRecorder struct {
	mock *MockGitConfigReader
}

// NewMockGitConfigReader creates a new mock instance.
func NewMockGitConfigReader(ctrl *gomock.Controller) *MockGitConfigReader {
	mock := &MockGitConfigReader{ctrl: ctrl}
	mock.recorder = &MockGitConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitConfigReader) EXPECT() *MockGitConfigReaderMockRecorder {
	return m.recorder
}

// CreateSignature mocks base method.
func (m *MockGitConfigReader) CreateSignature() (*object.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignature")
	ret0, _ := ret[0].(*object.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSignature indicates an expected call of CreateSignature.
func (mr *MockGitConfigReaderMockRecorder) CreateSignature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignature", reflect.TypeOf((*MockGitConfigReader)(nil).CreateSignature))
}

// GetUserEmail mocks base method.
func (m *MockGitConfigReader) GetUserEmail() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEmail")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmail indicates an expected call of GetUserEmail.
func (mr *MockGitConfigReaderMockRecorder) GetUserEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmail", reflect.TypeOf((*MockGitConfigReader)(nil).GetUserEmail))
}

// GetUserName mocks base method.
func (m *MockGitConfigReader) GetUserName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserName indicates an expected call of GetUserName.
func (mr *MockGitConfigReaderMockRecorder) GetUserName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserName", reflect.TypeOf((*MockGitConfigReader)(nil).GetUserName))
}

// LoadConfig mocks base method.
func (m *MockGitConfigReader) LoadConfig(repoPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig", repoPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadConfig indicates an expected call of LoadConfig.
func (mr *MockGitConfigReaderMockRecorder) LoadConfig(repoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockGitConfigReader)(nil).LoadConfig), repoPath)
}
