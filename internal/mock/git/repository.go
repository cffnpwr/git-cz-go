// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../mock/git/repository.go -package=git
//

// Package git is a generated GoMock package.
package git

import (
	reflect "reflect"

	git "github.com/cffnpwr/git-cz-go/internal/interface/git"
	plumbing "github.com/go-git/go-git/v5/plumbing"
	gomock "go.uber.org/mock/gomock"
)

// MockGitRepository is a mock of GitRepository interface.
type MockGitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGitRepositoryMockRecorder
	isgomock struct{}
}

// MockGitRepositoryMockRecorder is the mock recorder for MockGitRepository.
type MockGitRepositoryMockRecorder struct {
	mock *MockGitRepository
}

// NewMockGitRepository creates a new mock instance.
func NewMockGitRepository(ctrl *gomock.Controller) *MockGitRepository {
	mock := &MockGitRepository{ctrl: ctrl}
	mock.recorder = &MockGitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitRepository) EXPECT() *MockGitRepositoryMockRecorder {
	return m.recorder
}

// Head mocks base method.
func (m *MockGitRepository) Head() (*plumbing.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head")
	ret0, _ := ret[0].(*plumbing.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockGitRepositoryMockRecorder) Head() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockGitRepository)(nil).Head))
}

// Worktree mocks base method.
func (m *MockGitRepository) Worktree() (git.GitWorktree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Worktree")
	ret0, _ := ret[0].(git.GitWorktree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Worktree indicates an expected call of Worktree.
func (mr *MockGitRepositoryMockRecorder) Worktree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Worktree", reflect.TypeOf((*MockGitRepository)(nil).Worktree))
}
